configurations.testImplementation.canBeResolved = true

dependencies {
    api project(":infra")

    implementation(Libs.aws_java_sdk_kms)
    implementation(Libs.aws_java_sdk_cloudfront)
    implementation(Libs.aws_java_sdk_logs)
    implementation(Libs.aws_java_sdk_secretsmanager)
    implementation(Libs.aws_java_sdk_ssm)
    implementation(Libs.aws_java_sdk_sns)
    implementation(Libs.aws_java_sdk_dynamodb)
    implementation(Libs.aws_java_sdk_kinesis)
    implementation(Libs.aws_java_sdk_athena)
    implementation(Libs.aws_java_sdk_sqs)

    implementation(platform(Libs.aws_xray_recorder_sdk_bom))
    implementation(Libs.aws_xray_recorder_sdk_core)
    implementation(Libs.aws_xray_recorder_sdk_aws_sdk_core)
    implementation(Libs.aws_xray_recorder_sdk_aws_sdk)
    implementation(Libs.aws_xray_recorder_sdk_aws_sdk_instrumentor)

    implementation(Libs.caffeine)

    implementation(platform(Libs.protobuf_bom))
    implementation(Libs.protobuf_java)

    implementation(Libs.bcrypt)

    implementation(platform(Libs.jackson_bom))
    implementation(Libs.jackson_databind)
    implementation(Libs.jackson_module_kotlin)
    implementation(Libs.jackson_datatype_jdk8)
    implementation(Libs.jackson_datatype_jsr310)

    implementation(Libs.jcommander)
    implementation(Libs.jaxb_api)
    implementation(Libs.zip4j)
    implementation(Libs.commons_csv)

    testImplementation(platform(Libs.bom))
    testImplementation(Libs.lambda)
    testImplementation(Libs.athena)

    testImplementation(Libs.http4k_aws)
    testImplementation(Libs.http4k_testing_servirtium)
    testImplementation(Libs.http4k_resilience4j)

    testImplementation(Libs.jackson_dataformat_xml)

    testApi project(path: ":infra", configuration: 'testArtifacts')
}

test {
    filter {
        includeTestsMatching "*Test"
        excludeTestsMatching "smoke.*"
        excludeTestsMatching "contract.*"
        excludeTestsMatching "integration.*"
    }
}

task testIntegration(type: Test) {
    useJUnitPlatform()

    filter {
        includeTestsMatching "integration.*"
    }
}

task testSmokeParallel(type: Test) {
    useJUnitPlatform{
        excludeTags 'serial'
    }

    description = 'Runs parallel smoke tests.'
    group = 'verification'

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    filter {
        includeTestsMatching "smoke.*Test"
    }

    reports.html.destination = file("$projectDir/../../../../../out/reports/testSmokeParallel")
    reports.junitXml.destination = file("$projectDir/../../../../../out/reports/testSmokeParallel")
}

task testSmokeSerial(type: Test) {
    useJUnitPlatform{
        includeTags 'serial'
    }

    description = 'Runs serial smoke tests.'
    group = 'verification'

    filter {
        includeTestsMatching "smoke.*Test"
    }

    // include serial tags
    mustRunAfter(testSmokeParallel)

    reports.html.destination = file("$projectDir/../../../../../out/reports/testSmokeSerial")
    reports.junitXml.destination = file("$projectDir/../../../../../out/reports/testSmokeSerial")
}

task testSmoke(type: Test) {
    dependsOn(testSmokeParallel)
    dependsOn(testSmokeSerial)
}

task generateSignature(type: JavaExec) {
    group = "Execution"
    description = "Generate signature for some file"
    classpath = sourceSets.main.runtimeClasspath
    main = "uk.nhs.nhsx.core.signature.DistributionSignatureMain"
    args System.getProperty("sign.args", "").split()
}

task exploreExportFile(type: JavaExec) {
    group = "Execution"
    description = "Explore export.bin in working directory"
    classpath = sourceSets.main.runtimeClasspath
    main = "uk.nhs.nhsx.diagnosiskeydist.ExportFileExplorer"
    args System.getProperty("explore.args", "").split()
}
