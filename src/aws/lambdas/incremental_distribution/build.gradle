import com.github.jk1.license.render.*

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath Libs.org_jetbrains_kotlin_jvm_gradle_plugin
        classpath Libs.com_adarshr_test_logger_gradle_plugin
        classpath Libs.gradle_license_report
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'jacoco'
    apply plugin: "com.github.jk1.dependency-license-report"

    group = 'com.demo'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    compileKotlin.kotlinOptions {
        jvmTarget = "11"
        suppressWarnings = false
        freeCompilerArgs += "-Xjvm-default=all"
    }

    compileTestKotlin.kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += "-Xjvm-default=all"
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += ["-parameters"]
    }

    testlogger {
        theme 'standard-parallel'
    }

    task zipLambdaDistribution(type: Zip) {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        destinationDirectory = new File(rootDir, "../../../../out/build")
        from compileJava
        from compileKotlin
        from processResources
        into("lib") {
            from configurations.runtimeClasspath
        }
    }

    task lambdaZip {
        dependsOn(check, zipLambdaDistribution)
    }

    test {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        useJUnitPlatform()

        testlogger {
            showPassed false
            showSkipped false
            slowThreshold 5000
        }

        reports.html.destination = file("$projectDir/../../../../../out/reports/testUnit_${project.name}")
        reports.junitXml.destination = file("$projectDir/../../../../../out/reports/testUnit_${project.name}")

        finalizedBy jacocoTestReport
    }

    jacoco {
        toolVersion = "0.8.7"
        reportsDirectory = layout.projectDirectory.dir("../../../../../out/reports/testCoverage_${project.name}")
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            csv.required = false
        }
    }

    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }

    licenseReport {
        outputDir = "$projectDir/../../../../../out/reports/licenses_${project.name}"
        renderers = [new CsvReportRenderer()]
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }

    artifacts {
        testArtifacts testJar
    }

    dependencies {
        testApi(platform(Libs.junit_bom))
        testApi(Libs.org_junit_jupiter_junit_jupiter)
        testApi(Libs.junit_jupiter_params)

        testApi(platform(Libs.http4k_bom))
        testApi(Libs.http4k_format_moshi)
        testApi(Libs.http4k_testing_approval)
        testApi(Libs.http4k_testing_servirtium)
        testApi(Libs.http4k_testing_strikt)

        testApi(Libs.strikt_jvm)
        testApi(Libs.jsonassert)
        testApi(Libs.javafaker)

        testApi(Libs.mockk)
        testApi(Libs.awaitility)
        testApi(Libs.snodge)
        testApi(Libs.jose4j)

        testApi(Libs.wiremock_jre8)
        testApi(Libs.bcpkix_jdk15on)
        testApi(Libs.bcprov_ext_jdk15on)

        testApi(platform(Libs.testcontainers_bom))
        testApi(Libs.org_testcontainers_junit_jupiter)
        testApi(Libs.localstack)

        testRuntimeOnly(Libs.javax_json)
    }
}
